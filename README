
<h3 align="center">Social Media API</h3>

## Table of Contents
- [Installation](#installation)
- [Usage](#usage)
- [Features](#features)
- [Walkthrough](#walkthrough)
- [License](#license)
- [Contributors and Questions](#contributors-and-questions)

## Description
The Social Network API is a backend application built using Node.js, Express.js, and MongoDB. It provides RESTful API endpoints for managing users, thoughts, reactions, and friendships in a social network application.

## Installation
1. Clone the repository to your machine:
  bash
   git clone https://github.com/nita9801/social-network-api.git

2. Navigate into the project directory:
  bash
   cd social-network-api
  

3. Install the dependencies:
  bash
   npm install
  

4. Ensure you have MongoDB installed and running locally or set up a MongoDB Atlas URI in your environment variables.

5. Start the server:
  bash
   npm start
  


  
<p align="right">(<a href="#readme-top">back to top</a>)</p>
<!-- Usage -->

## Usage
Once the server is running, use Insomnia to interact with the following routes:
<!-- LICENSE -->

## User Routes
- GET /api/users – Get all users
- GET /api/users/:userId – Get a user by ID
- POST /api/users – Create a new user
- PUT /api/users/:userId` – Update a user
- DELETE /api/users/:userId – Delete a user and their thoughts
- POST /api/users/:userId/friends/:friendId – Add a friend
- DELETE /api/users/:userId/friends/:friendId – Remove a friend

## Thought Routes
- GET /api/thoughts – Get all thoughts
- GET /api/thoughts/:thoughtId – Get a thought by ID
- POST /api/thoughts – Create a thought and associate it with a user
- PUT /api/thoughts/:thoughtId – Update a thought
- DELETE /api/thoughts/:thoughtId – Delete a thought

## Reaction Routes
- POST /api/thoughts/:thoughtId/reactions – Add a reaction
- DELETE /api/thoughts/:thoughtId/reactions/:reactionId – Remove a reaction

## Features
- RESTful API for a social network platform
- Full CRUD operations for users and thoughts
- Embedded subdocuments for reactions
- Self-referencing relationships for friends
- Mongoose virtuals for friend and reaction counts
- Custom timestamp formatting using getters
- Modular code architecture for scalability and maintainability

## Walkthrough
A full walkthrough video demonstrating all functionality can be found here:  
The video includes: (was unable to do a video)
- Starting the server
- Testing all GET, POST, PUT, DELETE routes for users, thoughts, reactions, and friends using Insomnia

The video includes:
- Starting the server
- Testing all GET, POST, PUT, DELETE routes for users, thoughts, reactions, and friends using Insomnia

## License
This project is licensed under the MIT License.

## Contributors and Questions
for any questions, comments or suggestions reach out as follows.

 Created by: Christine L 

**Email**: [gmail](nita9801@gmail.com)

**github**: [nita9801](https://github.com/nita9801/)




 

